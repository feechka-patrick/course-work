{"ast":null,"code":"var _jsxFileName = \"/home/nmisfit/Desktop/course-work/client/src/pages/Game.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport Square from '../components/Square';\nimport '../css/GameComponents.css';\nimport { calculateWinner } from './GameUtils';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Game = () => {\n  _s();\n\n  const [board, setBoard] = useState(Array(9).fill(null));\n  const [countStep, setCount] = useState(0);\n  const [currentPlayer, setPlayer] = useState('X');\n  const winner = calculateWinner(board);\n\n  function getRandomInt(min, max) {\n    min = Math.ceil(min);\n    max = Math.floor(max);\n    return Math.floor(Math.random() * (max - min)) + min; //Максимум не включается, минимум включается\n  }\n\n  const buttonClick = index => {\n    const boardCopy = [...board];\n    let step = 0;\n    if (winner || boardCopy[index]) return;\n    boardCopy[index] = 'X';\n    step++;\n\n    if (!winner && countStep < 8) {\n      while (boardCopy[index]) {\n        index = getRandomInt(0, 9);\n      }\n\n      boardCopy[index] = 'O';\n      step++;\n    }\n\n    setCount(countStep + step);\n    setBoard(boardCopy);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"black_back\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"board\",\n      children: board.map((square, i) => /*#__PURE__*/_jsxDEV(Square, {\n        value: square,\n        onClick: () => buttonClick(i)\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game__info\",\n      children: [\" \", winner ? \"Победил \" + winner + \" !\" : \"Ходит: \" + 'X']\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Game, \"4OQMa6swj44TY4Ze1aV5awkceKg=\");\n\n_c = Game;\nexport default Game;\n\nvar _c;\n\n$RefreshReg$(_c, \"Game\");","map":{"version":3,"sources":["/home/nmisfit/Desktop/course-work/client/src/pages/Game.js"],"names":["React","useState","Square","calculateWinner","Game","board","setBoard","Array","fill","countStep","setCount","currentPlayer","setPlayer","winner","getRandomInt","min","max","Math","ceil","floor","random","buttonClick","index","boardCopy","step","map","square","i"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,MAAP,MAAmB,sBAAnB;AACA,OAAO,2BAAP;AACA,SAASC,eAAT,QAAgC,aAAhC;;;AAEA,MAAMC,IAAI,GAAG,MAAM;AAAA;;AACjB,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBL,QAAQ,CAACM,KAAK,CAAC,CAAD,CAAL,CAASC,IAAT,CAAc,IAAd,CAAD,CAAlC;AACA,QAAM,CAACC,SAAD,EAAYC,QAAZ,IAAwBT,QAAQ,CAAC,CAAD,CAAtC;AACA,QAAM,CAACU,aAAD,EAAgBC,SAAhB,IAA6BX,QAAQ,CAAC,GAAD,CAA3C;AACA,QAAMY,MAAM,GAAGV,eAAe,CAACE,KAAD,CAA9B;;AAGA,WAASS,YAAT,CAAsBC,GAAtB,EAA2BC,GAA3B,EAAgC;AAC9BD,IAAAA,GAAG,GAAGE,IAAI,CAACC,IAAL,CAAUH,GAAV,CAAN;AACAC,IAAAA,GAAG,GAAGC,IAAI,CAACE,KAAL,CAAWH,GAAX,CAAN;AACA,WAAOC,IAAI,CAACE,KAAL,CAAWF,IAAI,CAACG,MAAL,MAAiBJ,GAAG,GAAGD,GAAvB,CAAX,IAA0CA,GAAjD,CAH8B,CAGwB;AACvD;;AAED,QAAMM,WAAW,GAAIC,KAAD,IAAW;AAC7B,UAAMC,SAAS,GAAG,CAAC,GAAGlB,KAAJ,CAAlB;AACA,QAAImB,IAAI,GAAG,CAAX;AAEA,QAAIX,MAAM,IAAIU,SAAS,CAACD,KAAD,CAAvB,EAAgC;AAChCC,IAAAA,SAAS,CAACD,KAAD,CAAT,GAAmB,GAAnB;AACAE,IAAAA,IAAI;;AAEJ,QAAI,CAACX,MAAD,IAAWJ,SAAS,GAAG,CAA3B,EAA8B;AAC5B,aAAOc,SAAS,CAACD,KAAD,CAAhB,EAAyB;AACvBA,QAAAA,KAAK,GAAGR,YAAY,CAAC,CAAD,EAAI,CAAJ,CAApB;AACD;;AACDS,MAAAA,SAAS,CAACD,KAAD,CAAT,GAAmB,GAAnB;AACAE,MAAAA,IAAI;AACL;;AAEDd,IAAAA,QAAQ,CAACD,SAAS,GAAGe,IAAb,CAAR;AACAlB,IAAAA,QAAQ,CAACiB,SAAD,CAAR;AACD,GAlBD;;AAoBA,sBACE;AAAK,IAAA,SAAS,EAAC,YAAf;AAAA,4BACE;AAAK,MAAA,SAAS,EAAC,OAAf;AAAA,gBAEIlB,KAAK,CAACoB,GAAN,CAAU,CAACC,MAAD,EAASC,CAAT,kBACR,QAAC,MAAD;AAEE,QAAA,KAAK,EAAED,MAFT;AAGE,QAAA,OAAO,EAAE,MAAML,WAAW,CAACM,CAAD;AAH5B,SACOA,CADP;AAAA;AAAA;AAAA;AAAA,cADF;AAFJ;AAAA;AAAA;AAAA;AAAA,YADF,eAWE;AAAK,MAAA,SAAS,EAAC,YAAf;AAAA,sBAA8Bd,MAAM,GAAG,aAAaA,MAAb,GAAsB,IAAzB,GAA+B,YAAY,GAA/E;AAAA;AAAA;AAAA;AAAA;AAAA,YAXF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAeD,CAhDD;;GAAMT,I;;KAAAA,I;AAkDN,eAAeA,IAAf","sourcesContent":["import React, { useState } from 'react';\nimport Square from '../components/Square';\nimport '../css/GameComponents.css'\nimport { calculateWinner } from './GameUtils';\n\nconst Game = () => {\n  const [board, setBoard] = useState(Array(9).fill(null))\n  const [countStep, setCount] = useState(0)\n  const [currentPlayer, setPlayer] = useState('X')\n  const winner = calculateWinner(board)\n\n\n  function getRandomInt(min, max) {\n    min = Math.ceil(min);\n    max = Math.floor(max);\n    return Math.floor(Math.random() * (max - min)) + min; //Максимум не включается, минимум включается\n  }\n\n  const buttonClick = (index) => {\n    const boardCopy = [...board]\n    let step = 0;\n\n    if (winner || boardCopy[index]) return;\n    boardCopy[index] = 'X'\n    step++\n\n    if (!winner && countStep < 8) {\n      while (boardCopy[index]) {\n        index = getRandomInt(0, 9);\n      }\n      boardCopy[index] = 'O'\n      step++\n    }\n\n    setCount(countStep + step)\n    setBoard(boardCopy)\n  }\n\n  return (\n    <div className='black_back'>\n      <div className=\"board\">\n        {\n          board.map((square, i) => (\n            <Square\n              key={i}\n              value={square}\n              onClick={() => buttonClick(i)} />\n          ))\n        }\n      </div>\n      <div className='game__info'> {winner ? \"Победил \" + winner + \" !\": \"Ходит: \" + 'X'}</div>\n    </div>\n  );\n}\n\nexport default Game;\n"]},"metadata":{},"sourceType":"module"}